name:                Systematic
version:             0.1.0.0
--synopsis:
description:         Please see the README on Github at <https://github.com/kwf/Systematic#readme>
homepage:            https://github.com/kwf/Systematic#readme
license:             MIT
license-file:        LICENSE
author:              Kenneth Foner
maintainer:          kwf@very.science
copyright:           Copyright (c) 2018 Kenneth Foner
--category:
build-type:          Simple
cabal-version:       >=1.10
extra-source-files:  README.md

library

  hs-source-dirs:
    src

  default-language:
    Haskell2010

  exposed-modules: Systematic
                   Systematic.CError
                   Systematic.Enumerator
                   Systematic.Backend
                   Systematic.Backend.IO
                   Systematic.Logging

  build-depends:   base >= 4.7 && < 5,
                   bytestring >= 0.10 && < 0.11,
                   operational >= 0.2 && < 0.3,
                   socket >= 0.8 && < 0.9,
                   binary >= 0.8 && < 0.9,
                   transformers >= 0.5 && < 0.6,
                   stm >= 2.4 && < 2.5,
                   containers >= 0.5 && < 0.6

  ghc-options:
    -Wall
    -Wincomplete-uni-patterns
    -Wincomplete-record-updates
    -Wredundant-constraints
    -Wno-unticked-promoted-constructors

  default-extensions:

    -- THIS IS UNUSUAL TO THIS PROJECT!
    StrictData,

    -- Type system
    AllowAmbiguousTypes, ConstraintKinds, GADTs, RankNTypes, TypeInType,
    TypeFamilyDependencies, UndecidableInstances,

    -- Type signatures & inference
    DefaultSignatures, InstanceSigs, NamedWildCards, NoMonomorphismRestriction,
    PartialTypeSignatures, ScopedTypeVariables,

    -- Typeclasses
    FlexibleContexts, FlexibleInstances, FunctionalDependencies, ImplicitParams,

    -- Literals
    BinaryLiterals, NegativeLiterals, NumDecimals, OverloadedStrings,

    -- Pattern-matching
    BangPatterns, EmptyCase, PatternGuards, PatternSynonyms, ViewPatterns,

    -- Syntactic Sugar
    LambdaCase,  MultiWayIf, NamedFieldPuns, ParallelListComp, PostfixOperators,
    RecursiveDo, TupleSections, TypeApplications, TypeOperators, UnicodeSyntax,

    -- Unboxed Types
    MagicHash, UnboxedTuples, UnboxedSums,

    -- Deriving
    DeriveAnyClass, DeriveDataTypeable, DeriveFoldable, DeriveFunctor,
    DeriveGeneric, DeriveLift, DeriveTraversable, DerivingStrategies,
    GeneralizedNewtypeDeriving, StandaloneDeriving
